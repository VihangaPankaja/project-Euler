""" 
  Pentagonal numbers are generated by the formula, 
*   𝑃ₙ = 𝑛(3𝑛 − 1) / 2

  The first ten pentagonal numbers are:
*   1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

  It can be seen that 𝑃₄ + 𝑃₇ = 22 + 70 = 92 = P8. 
  However, their difference, 70 − 22 = 48, is not pentagonal.
  
* Find the pair of pentagonal numbers, 𝑃ⱼ and 𝑃ₖ, for which their sum and difference are pentagonal and 𝐷 = |𝑃ₖ − 𝑃ⱼ| is minimised; 
? what is the value of 𝐷? 
"""

from typing import Generator


def pentagonal(n: int=1) -> Generator[int, None, None]:
    """ 
    generates pentagonal numbers.
        Parameters:
            𝑛 (int): (optional) starts with given number
            
    ! infine generator
    """

    while True:
        yield int(n* (3*n - 1) / 2)
        n += 1
    

def is_pentagonal(n: int) -> bool:
    if (1 + (1 + 24*n) ** 0.5) % 6 == 0:
        return True
    
    return False


def main() -> int:
    """ find the pair of pentagonal numbers that sum and difference also penagonal and 𝐷 is minimised """

    for index_k, P_k in enumerate(pentagonal()):    # 𝑃ₖ values

        start: int = int((1 + (72*index_k + 49)**0.5) /6) 
        # reduce unnecessary computation by strat from higher term
        
        for P_j in pentagonal(start):   # 𝑃ⱼ values
            if P_j == P_k:
                break
            
            if (is_pentagonal(P_k - P_j) and 
                is_pentagonal(P_k + P_j)):   # addtion and substractiona aloso in pentagonal
                
                return P_k - P_j           # first 𝐷 is answer but after find may take long time to reach loop end

if __name__ == '__main__':
    print(main())
    